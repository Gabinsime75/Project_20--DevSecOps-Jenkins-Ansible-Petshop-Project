pipeline{
    agent   any
    tools{
        jdk 'jdk17'
        maven   'maven3'
        nodejs  'node19'
    }

    environment {
        SCANNER_HOME=tool 'sonar-scanner' // This environment variable points to the installation directory of the SonarQube Scanner.
    }

    stages{
        stage ('clean Worksoace'){
            steps{
                cleanWs()
            }
        }
        stage ('checkout scm'){
            steps{
                git branch: 'main', url: 'https://github.com/Gabinsime75/Project_20--DevSecOps-Jenkins-Ansible-Petshop-Project.git'
            }
        }
        stage ('maven compile'){
            steps{
                sh 'mvn clean compile'
            }
        }
        stage ('maven test'){
            steps{
                sh 'mvn test'
            }
        }
        stage ('Install dependencies'){
            steps{
                sh  'npm install'
            }
        }
        stage ('Sonarqube Analysis'){
            steps{
                withSonarQubeEnv('sonar-server'){
                    sh ''' $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=Petshop \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=Petshop '''
                }
            }
        }
        stage ('quality gate'){
            steps{
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage ('Build war file'){
            steps{
                sh 'mvn clean install -DskipTests=true'
            }
        }
        stage ('trivy fs scan') {
            steps{
                sh 'trivy fs . > trivyfs.txt'
            }
        }
        stage ('OWASP Dependency Check'){
            steps{
                dependencyCheck additionalArguments: '--scan ./ --format XML ', odcInstallation: 'DP-Check'
                ependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
    }
}